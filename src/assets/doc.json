{
  "packageDocs": {
    "config": [
      {
        "filename": "config.go",
        "path": "config/config.go",
        "docs": [
          {
            "name": "GetConfiguration",
            "description": "Load the ZenDoc configuration from the configuration file",
            "author": "",
            "deprecated": "",
            "type": "function",
            "params": [],
            "return": {
              "type": "(*Config, error)",
              "description": "A pointer to the loaded configuration and an error if loading fails"
            },
            "example": "GetConfiguration() => &Config{...}, nil"
          }
        ]
      }
    ],
    "doc": [
      {
        "filename": "doc.go",
        "path": "internal/doc/doc.go",
        "docs": [
          {
            "name": "Param",
            "description": "Struct to represent a function or struct field parameter in the documentation system.",
            "author": "Dorian TERBAH",
            "deprecated": "",
            "type": "struct",
            "fields": [
              {
                "name": "Name",
                "type": "string",
                "description": "The name of the parameter"
              },
              {
                "name": "Type",
                "type": "string",
                "description": "The Go type of the parameter"
              },
              {
                "name": "Description",
                "type": "string",
                "description": "A description of what the parameter represents"
              }
            ]
          },
          {
            "name": "Return",
            "description": "Struct to represent the return value of a documented function in the documentation system. Supports a single return type only for simplicity.@author",
            "author": "Dorian TERBAH",
            "deprecated": "",
            "type": "struct",
            "fields": [
              {
                "name": "Type",
                "type": "string",
                "description": "The Go type of the return value"
              },
              {
                "name": "Description",
                "type": "string",
                "description": "A description of the return value"
              }
            ]
          },
          {
            "name": "BaseDoc",
            "description": "Base struct shared by all documentation types, providing common metadata fields such as name, author, and description.@author",
            "author": "Dorian TERBAH",
            "deprecated": "",
            "type": "struct",
            "fields": [
              {
                "name": "Name",
                "type": "string",
                "description": "The name of the documented item (function, struct, etc.)"
              },
              {
                "name": "Description",
                "type": "string",
                "description": "A description of what this item does"
              },
              {
                "name": "Author",
                "type": "string",
                "description": "The author of the item or its documentation"
              },
              {
                "name": "Deprecated",
                "type": "string",
                "description": "A deprecation message, if the item is deprecated"
              },
              {
                "name": "Type",
                "type": "string",
                "description": "The type of the documented item (e.g. 'function', 'struct')"
              }
            ]
          },
          {
            "name": "FuncDoc",
            "description": "Struct to represent the documentation associated to a function",
            "author": "Dorian TERBAH",
            "deprecated": "",
            "type": "struct",
            "fields": [
              {
                "name": "Params",
                "type": "[]Param",
                "description": "The params of the function"
              },
              {
                "name": "Return",
                "type": "*Return",
                "description": "The return type of the function, if it exists"
              },
              {
                "name": "Example",
                "type": "string",
                "description": "An example of the usage of this function"
              }
            ]
          },
          {
            "name": "StructDoc",
            "description": "Struct to represent the documentation associated to a Go struct",
            "author": "Dorian TERBAH",
            "deprecated": "",
            "type": "struct",
            "fields": [
              {
                "name": "Fields",
                "type": "[]StructField",
                "description": "The fields that belong to the struct, with their type and description"
              }
            ]
          },
          {
            "name": "FileDoc",
            "description": "Struct to represent the documentation of a Go file in a package",
            "author": "Dorian TERBAH",
            "deprecated": "",
            "type": "struct",
            "fields": [
              {
                "name": "FileName",
                "type": "string",
                "description": "The name of the file"
              },
              {
                "name": "Path",
                "type": "string",
                "description": "The full path to the file"
              },
              {
                "name": "Docs",
                "type": "[]any",
                "description": "The documentation items contained in this file (functions, structs, etc.)"
              }
            ]
          },
          {
            "name": "ProjectDoc",
            "description": "Struct to represent the entire documentation of a project, organized by package name and files within each package",
            "author": "Dorian TERBAH",
            "deprecated": "",
            "type": "struct",
            "fields": [
              {
                "name": "PackageDocs",
                "type": "map[string][]FileDoc",
                "description": "A mapping from package names to their documented files"
              }
            ]
          }
        ]
      }
    ],
    "export": [
      {
        "filename": "json.go",
        "path": "core/export/json.go",
        "docs": [
          {
            "name": "Export",
            "description": "Export the project documentation to a JSON file",
            "author": "",
            "deprecated": "",
            "type": "function",
            "params": [
              {
                "name": "projectDoc",
                "type": "doc.ProjectDoc",
                "description": "The documentation to export"
              }
            ],
            "return": {
              "type": "error",
              "description": "An error if writing to file fails"
            },
            "example": "JSONExporter{}.Export(projectDoc)",
            "struct": "JSONExporter"
          }
        ]
      },
      {
        "filename": "web.go",
        "path": "core/export/web.go",
        "docs": [
          {
            "name": "Export",
            "description": "Export the project documentation as JSON to stdout",
            "author": "",
            "deprecated": "",
            "type": "function",
            "params": [
              {
                "name": "projectDoc",
                "type": "doc.ProjectDoc",
                "description": "The documentation to export"
              }
            ],
            "return": {
              "type": "error",
              "description": "An error if the export fails"
            },
            "example": "WebExporter{}.Export(projectDoc)",
            "struct": "WebExporter"
          }
        ]
      }
    ],
    "generate": [
      {
        "filename": "generate.go",
        "path": "internal/zendoc/generate/generate.go",
        "docs": [
          {
            "name": "GenerateDoc",
            "description": "Generate the documentation in a JSON format, or in a web app",
            "author": "Dorian TERBAH",
            "deprecated": "",
            "type": "function",
            "params": [
              {
                "name": "outputFormat",
                "type": "string",
                "description": "Either \"json\" or \"web\""
              }
            ],
            "return": {
              "type": "error",
              "description": "An error if the generation has failed"
            },
            "example": ""
          }
        ]
      }
    ],
    "parser": [
      {
        "filename": "parser.go",
        "path": "core/parser/parser.go",
        "docs": [
          {
            "name": "DocParser",
            "description": "Struct responsible for orchestrating validation logic when parsing documentation from Go source files. It holds a list of validators for files and functions to modularize and organize parsing rules and behaviors.",
            "author": "",
            "deprecated": "",
            "type": "struct",
            "fields": [
              {
                "name": "FileValidators",
                "type": "[]DocParserFileValidator",
                "description": "A list of validators applied at the file level (e.g. checking file-level tags, imports, etc.)"
              },
              {
                "name": "FunctionValidators",
                "type": "[]DocParserFunctionValidator",
                "description": "A list of validators specifically designed to validate function-level documentation (e.g. param/return tag parsing, required fields, etc.)"
              }
            ]
          },
          {
            "name": "ParseDocForDir",
            "description": "Recursively parse documentation in a directory and its subdirectories",
            "author": "",
            "deprecated": "",
            "type": "function",
            "params": [
              {
                "name": "dirPath",
                "type": "string",
                "description": "The root path to scan"
              },
              {
                "name": "currentPath",
                "type": "string",
                "description": "The relative path used for output (maintains relative structure)"
              }
            ],
            "return": {
              "type": "*doc.ProjectDoc, error",
              "description": "The parsed project documentation and an error if something went wrong"
            },
            "example": "ParseDocForDir(\"./myproject\", \"\")",
            "struct": "DocParser"
          },
          {
            "name": "ParseDocForFile",
            "description": "Parse the documentation for a single file",
            "author": "Dorian TERBAH",
            "deprecated": "Just a small test",
            "type": "function",
            "params": [
              {
                "name": "filePath",
                "type": "string",
                "description": "The file path"
              }
            ],
            "return": {
              "type": "(string, []doc.FuncDoc)",
              "description": "The associated doc for the file. If no package is mentioned, it return an empty string and nil"
            },
            "example": "ParseDocForFile(\"myfile.go\")",
            "struct": "DocParser"
          },
          {
            "name": "ParseDocForStruct",
            "description": "Parse documentation for a struct",
            "author": "Dorian TERBAH",
            "deprecated": "",
            "type": "function",
            "params": [
              {
                "name": "function",
                "type": "*ast.CommentGroup",
                "description": "The comments line associated to the struct"
              },
              {
                "name": "name",
                "type": "string",
                "description": "Name of the struct"
              }
            ],
            "return": {
              "type": "*doc.StructDoc",
              "description": "Associated function documentation object, or nil if there is no comments with tags"
            },
            "example": "",
            "struct": "DocParser"
          },
          {
            "name": "ParseDocForFunction",
            "description": "Parse documentation for a single function",
            "author": "Dorian TERBAH",
            "deprecated": "",
            "type": "function",
            "params": [
              {
                "name": "function",
                "type": "*ast.FuncDecl",
                "description": "The function to parse"
              }
            ],
            "return": {
              "type": "*doc.FuncDoc",
              "description": "Associated function documentation object, or nil if there is not tagged comments"
            },
            "example": "",
            "struct": "DocParser"
          }
        ]
      }
    ],
    "serializer": [
      {
        "filename": "serializer.go",
        "path": "core/parser/serializer/serializer.go",
        "docs": [
          {
            "name": "SerializeToJSON",
            "description": "Serialize a ProjectDoc into a pretty-printed JSON string",
            "author": "",
            "deprecated": "",
            "type": "function",
            "params": [
              {
                "name": "doc",
                "type": "doc.ProjectDoc",
                "description": "The project documentation to serialize"
              }
            ],
            "return": {
              "type": "(string, error)",
              "description": "The resulting JSON string and an error if serialization fails"
            },
            "example": "SerializeToJSON(myDoc)"
          }
        ]
      }
    ]
  }
}
